classdef behr_paths_template
    % behr_paths: paths used in the BEHR algorithm.
    %	Automatically generated by BEHR_initial_setup on 2017-08-07
    %
    %	A number of paths are stored in this class as constant properties
    %	that can be accessed directly from the class without an instance. A
    %	list of the paths can be printed by calling
    %	behr_paths.ListAvailablePaths().
    %
    %	Note that this function should not be added to the BEHR git repo,
    %	as it must be specific to each person's computer. The first time
    %	this is created, you should check that all the paths are correct.
    %	You can verify they exists by calling the
    %	behr_paths.ValidatePaths() method.
    
    % Each of the following paths needs to be a local path on your
    % computer. For the code repositories, you will want to clone those
    % from the file server onto your computer and point the path to that
    % cloned repository. For the data directories that are on the file
    % server, you will need to mount the file server as a network drive on
    % your computer and point the paths below to that mounted path. Network
    % drives mapped on windows have the drive letter you assign when you
    % map it; on Macs, they are usually found under the /Volumes path. If
    % you are working on a Linux computer you'll usually create mount
    % points under /mnt or similar - that is how the satellite download
    % computer is set up.
    %
    % If you're working with BEHR on a cluster, you likely won't need to
    % deal with networked drives, and everything will have a
    % straightforward path.
    
    properties(Constant=true)
        %#PATHS
    end
    
    properties(Constant=true, Access=private)
        %#ISFILE
    end
    
    methods(Static=true)
        function success = ValidatePaths()
            fns = fieldnames(behr_paths);
            success = true;
            for a=1:numel(fns)
                if behr_paths.is_field_file.(fns{a})
                    test_type = 'file';
                else
                    test_type = 'dir';
                end
                if ~iscell(behr_paths.(fns{a}))
                    if ~exist(behr_paths.(fns{a}), test_type)
                        fprintf('%s is not a valid path\n', fns{a});
                        success = false;
                    end
                else
                    for b=1:numel(behr_paths.(fns{a}))
                        if ~exist(behr_paths.(fns{a}){b}, test_type)
                            fprintf('%s{%d} is not a valid path\n', fns{a}, b);
                            success = false;
                        end
                    end
                end
            end
        end
        
        function ListAvailablePaths()
            fns = fieldnames(behr_paths);
            fprintf('Available paths:\n');
            for a=1:numel(fns)
                if ~iscell(behr_paths.(fns{a}))
                    fprintf('  %s = %s\n', fns{a}, behr_paths.(fns{a}));
                else
                    fprintf('  %s = {%s}\n', fns{a}, strjoin(behr_paths.(fns{a}), ', '));
                end
            end
        end
    end
end